//
// Created by finne on 07.04.2023.
//

#pragma once
#include "split.h"
namespace nn {

// TODO: allow more than 2 layers to merge (should be trivial)
/**
 * merge layers which merges the inputs of two layers together. The layer cannot be used
 * after the usage a Split layer if no other layer is used in between.
 * In particular an error is given is one of the previous layers is a SplitHead which is generated by
 * a Split-Layer
 */
struct Merge : public Layer {
    Layer* l1;
    Layer* l2;

    int use_id_1;
    int use_id_2;

    Merge(Layer* l1, Layer* l2)
        : Layer(l1->size + l2->size)
        , l1(l1)
        , l2(l2) {
        use_id_1 = l1->use();
        use_id_2 = l2->use();}

    void compile(size_t batch_size) override {
        this->compile_suboutput(batch_size, Tape(size, batch_size));
        ERROR(use_id_1 == l1->used());
        ERROR(use_id_2 == l2->used());
    }

    void compile_suboutput(size_t batch_size, const Tape& output) override {
        Layer::compile_suboutput(batch_size, output);
        this->l1->compile_suboutput(batch_size, Tape{this->dense_output, l1->size, batch_size, 0, 0});
        this->l2->compile_suboutput(batch_size, Tape(this->dense_output, l2->size, batch_size, l1->size, 0));
        ERROR(!dynamic_cast<SplitHead*>(l1));
        ERROR(!dynamic_cast<SplitHead*>(l2));
    }
};
}    // namespace nn

